package buf

import (
	"fmt"

	"github.com/bazelbuild/bazel-gazelle/language"
	"github.com/bazelbuild/bazel-gazelle/rule"
)

const lintRuleKind = "buf_lint_test"

type LintConfig struct {
	Use    []string `json:"use,omitempty" yaml:"use,omitempty"`
	Except []string `json:"except,omitempty" yaml:"except,omitempty"`

	EnumZeroValueSuffix *string `json:"enum_zero_value_suffix,omitempty" yaml:"enum_zero_value_suffix,omitempty"`
	AllowCommentIgnores *bool   `json:"allow_comment_ignores,omitempty" yaml:"allow_comment_ignores,omitempty"`

	RpcAllowSameRequestResponse          *bool `json:"rpc_allow_same_request_response,omitempty" yaml:"rpc_allow_same_request_response,omitempty"`
	RpcAllowGoogleProtobufEmptyRequests  *bool `json:"rpc_allow_google_protobuf_empty_requests,omitempty" yaml:"rpc_allow_google_protobuf_empty_requests,omitempty"`
	RpcAllowGoogleProtobufEmptyResponses *bool `json:"rpc_allow_google_protobuf_empty_responses,omitempty" yaml:"rpc_allow_google_protobuf_empty_responses,omitempty"`

	ServiceSuffix *string             `json:"service_suffix,omitempty" yaml:"service_suffix,omitempty"`
	Ignore        []string            `json:"ignore,omitempty" yaml:"ignore,omitempty"`
	IgnoreOnly    map[string][]string `json:"ignore_only,omitempty" yaml:"ignore_only,omitempty"`
}

type lintRule struct {
}

func (lintRule) Kind() string {
	return lintRuleKind
}

func (lintRule) KindInfo() rule.KindInfo {
	return rule.KindInfo{
		MatchAttrs: []string{"targets"},
		MergeableAttrs: map[string]bool{
			"ignore":                          true,
			"ignore_only":                     true,
			"use_rules":                       true,
			"except_rules":                    true,
			"service_suffix":                  true,
			"allow_comment_ignores":           true,
			"enum_zero_value_suffix":          true,
			"rpc_allow_same_request_response": true,
			"rpc_allow_google_protobuf_empty_requests": true,
		},
	}
}

func (lintRule) LoadInfo() rule.LoadInfo {
	return rule.LoadInfo{
		Name:    "@rules_buf//buf:defs.bzl",
		Symbols: []string{lintRuleKind},
	}
}

func (lr lintRule) GenerateRules(args language.GenerateArgs) (res language.GenerateResult) {
	cfg := GetConfig(args.Config)

	protoLibRules := getRulesOfKind(args.OtherGen, "proto_library")
	for _, plr := range protoLibRules {
		res.Gen = append(res.Gen, lr.genRule(plr.Name(), cfg))
		res.Imports = append(res.Imports, struct{}{})
	}

	if args.File != nil {
		breakingRules := getRulesOfKind(args.File.Rules, breakingRuleKind)
		for _, r := range breakingRules {
			targets := r.AttrStrings("targets")
			if len(targets) > 1 {
				// Not generated by us
				continue
			}

			if len(targets) == 1 && protoLibRules[targets[0]] != nil {
				// Target is accurate so skip
				continue
			}

			res.Empty = append(res.Empty, r)
		}
	}

	return
}

// GenRule returns a list of rules that need be generated for each `proto_library` rule.
func (lintRule) genRule(name string, c *Config) *rule.Rule {
	r := rule.NewRule("buf_lint_test", fmt.Sprintf("%s_lint", name))

	r.SetAttr("targets", []string{fmt.Sprintf(":%s", name)})

	if c.Module != nil && c.Module.Lint != nil {
		lint := c.Module.Lint
		if len(lint.Use) > 0 {
			r.SetAttr("use_rules", lint.Use)
		}

		if len(lint.Except) > 0 {
			r.SetAttr("except_rules", lint.Except)
		}

		if len(lint.Ignore) > 0 {
			r.SetAttr("ignore", lint.Ignore)
		}

		if len(lint.IgnoreOnly) > 0 {
			r.SetAttr("ignore_only", lint.IgnoreOnly)
		}

		if lint.ServiceSuffix != nil {
			r.SetAttr("service_suffix", *lint.ServiceSuffix)
		}

		if lint.AllowCommentIgnores != nil {
			r.SetAttr("allow_comment_ignores", *lint.AllowCommentIgnores)
		}

		if lint.EnumZeroValueSuffix != nil {
			r.SetAttr("enum_zero_value_suffix", *lint.EnumZeroValueSuffix)
		}

		if lint.RpcAllowSameRequestResponse != nil {
			r.SetAttr("rpc_allow_same_request_response", *lint.RpcAllowSameRequestResponse)
		}

		if lint.RpcAllowGoogleProtobufEmptyRequests != nil {
			r.SetAttr("rpc_allow_google_protobuf_empty_requests", *lint.RpcAllowGoogleProtobufEmptyRequests)
		}

		if lint.RpcAllowGoogleProtobufEmptyResponses != nil {
			r.SetAttr("rpc_allow_google_protobuf_empty_responses", *lint.RpcAllowGoogleProtobufEmptyResponses)
		}
	}

	return r
}
